// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "testAlvtoShp/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// CheckPassword mocks base method.
func (m *MockAuth) CheckPassword(ctx context.Context, req models.AuthRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", ctx, req)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockAuthMockRecorder) CheckPassword(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockAuth)(nil).CheckPassword), ctx, req)
}

// CreateUser mocks base method.
func (m *MockAuth) CreateUser(ctx context.Context, req models.AuthRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthMockRecorder) CreateUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuth)(nil).CreateUser), ctx, req)
}

// ExtractUserIDFromAccessToken mocks base method.
func (m *MockAuth) ExtractUserIDFromAccessToken(ctx context.Context, accessToken string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractUserIDFromAccessToken", ctx, accessToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractUserIDFromAccessToken indicates an expected call of ExtractUserIDFromAccessToken.
func (mr *MockAuthMockRecorder) ExtractUserIDFromAccessToken(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractUserIDFromAccessToken", reflect.TypeOf((*MockAuth)(nil).ExtractUserIDFromAccessToken), ctx, accessToken)
}

// GenerateToken mocks base method.
func (m *MockAuth) GenerateToken(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthMockRecorder) GenerateToken(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuth)(nil).GenerateToken), id)
}

// GetUserByUsername mocks base method.
func (m *MockAuth) GetUserByUsername(ctx context.Context, username string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockAuthMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockAuth)(nil).GetUserByUsername), ctx, username)
}

// MockShop is a mock of Shop interface.
type MockShop struct {
	ctrl     *gomock.Controller
	recorder *MockShopMockRecorder
}

// MockShopMockRecorder is the mock recorder for MockShop.
type MockShopMockRecorder struct {
	mock *MockShop
}

// NewMockShop creates a new mock instance.
func NewMockShop(ctrl *gomock.Controller) *MockShop {
	mock := &MockShop{ctrl: ctrl}
	mock.recorder = &MockShopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShop) EXPECT() *MockShopMockRecorder {
	return m.recorder
}

// BuyItem mocks base method.
func (m *MockShop) BuyItem(ctx context.Context, userId int, item string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, userId, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockShopMockRecorder) BuyItem(ctx, userId, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockShop)(nil).BuyItem), ctx, userId, item)
}

// GetUserInfo mocks base method.
func (m *MockShop) GetUserInfo(ctx context.Context, userId int) (models.InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, userId)
	ret0, _ := ret[0].(models.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockShopMockRecorder) GetUserInfo(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockShop)(nil).GetUserInfo), ctx, userId)
}

// SendCoin mocks base method.
func (m *MockShop) SendCoin(ctx context.Context, userId int, req models.SendCoinRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoin", ctx, userId, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoin indicates an expected call of SendCoin.
func (mr *MockShopMockRecorder) SendCoin(ctx, userId, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoin", reflect.TypeOf((*MockShop)(nil).SendCoin), ctx, userId, req)
}
